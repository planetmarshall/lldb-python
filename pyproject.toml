[project]
name = "lldb-python"
version = "19.0.0.dev1"
authors = [{ name = "Andrew Marshall", email = "planetmarshalluk@gmail.com" }]
description = "Unofficial self contained distribution of the LLDB Python Bindings"
readme = "README.md"
keywords = ["lldb", "debugger", "llvm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: LLVM-exception",
    "Topic :: Software Development :: Debuggers"
]

[project.urls]
Documentation = "https://lldb.llvm.org/python_api.html"
Repository = "https://github.com/planetmarshall/lldb-python"

[build-system]
requires = [
    "conan",
    "scikit-build-core",
    "swig"
]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
build-dir = "build/{wheel_tag}"
logging.level = "INFO"
cmake.build-type = "Release"
cmake.source-dir = "llvm-project/llvm"
cmake.targets = ["liblldb", "lldb-server", "lldb-python-scripts"]
install.components = ["liblldb", "lldb-server", "lldb-python-scripts"]
wheel.packages = []
# LLDB generates its own prefix lib/python3.X/site_packages so install into
# the root of the wheel to avoid having to change the LLDB source
experimental = true
wheel.install-dir = "/data"

[tool.scikit-build.cmake.define]
CMAKE_C_COMPILER_LAUNCHER = "ccache"
CMAKE_CXX_COMPILER_LAUNCHER = "ccache"
CMAKE_PROJECT_TOP_LEVEL_INCLUDES = "conan_provider.cmake"
CMAKE_FIND_PACKAGE_PREFER_CONFIG = "ON"
LLVM_ENABLE_PROJECTS = "clang;lldb"
LLVM_TARGETS_TO_BUILD = { env = "SKBUILD_LLVM_TARGETS_TO_BUILD", default = "X86" }
LLVM_ENABLE_RUNTIMES = { env = "SKBUILD_LLVM_ENABLE_RUNTIMES", default = "" }
LLVM_RAM_PER_COMPILE_JOB = { env = "SKBUILD_LLVM_RAM_PER_COMPILE_JOB", default = "" }
LLVM_RAM_PER_LINK_JOB = { env = "SKBUILD_LLVM_RAM_PER_LINK_JOB", default = "" }
LLVM_INCLUDE_EXAMPLES = "OFF"
LLVM_ENABLE_ZLIB = "FORCE_ON"
LLVM_ENABLE_ZSTD = "FORCE_ON"
LLDB_SKIP_LINK_PYTHON = "ON"
LLDB_ENABLE_LUA = "OFF"
LLDB_ENABLE_PYTHON = "ON"

[tool.cibuildwheel]
archs = "native"
build-verbosity = 1
before-build = "./download-llvm.sh"
manylinux-x86_64-image = "quay.io/pypa/manylinux_2_28_x86_64"
test-requires = [
    "pytest",
    "cmake"
]

[tool.cibuildwheel.linux]
environment = { "CONAN_HOME" = "/host/tmp/conan", "CCACHE_DIR" = "/host/tmp/ccache" }
skip = "*-musllinux_"
environment-pass = [
    "CONAN_HOME",
    "CCACHE_DIR",
    "SKBUILD_LLVM_RAM_PER_COMPILE_JOB",
    "SKBUILD_LLVM_RAM_PER_LINK_JOB",
]
before-all = [
    "yum install -y wget",
    "./download-install-ccache.sh",
    "pip install patchelf wheel"
]
repair-wheel-command = [
    "python edit-wheel.py preprocess {wheel}",
    "auditwheel repair -w {dest_dir} {wheel}",
    "python edit-wheel.py postprocess {dest_dir}"
]

[tool.cibuildwheel.macos]
before-all = [
    "brew install ccache"
]
# this is necessary to build the conan dependencies on macos
environment = { "CC" = "/usr/bin/gcc" }
test-command = "pytest {project}/test"
repair-wheel-command = [
    "python edit-wheel.py preprocess {wheel}",
    "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
]
